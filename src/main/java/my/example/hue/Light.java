/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package my.example.hue;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Light extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7003466007369641974L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Light\",\"namespace\":\"my.example.hue\",\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"state\",\"type\":{\"type\":\"record\",\"name\":\"State\",\"fields\":[{\"name\":\"on\",\"type\":\"boolean\"},{\"name\":\"bri\",\"type\":\"long\"},{\"name\":\"hue\",\"type\":\"long\"},{\"name\":\"sat\",\"type\":\"long\"},{\"name\":\"effect\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"xy\",\"type\":{\"type\":\"array\",\"items\":\"double\"}},{\"name\":\"ct\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Ct\",\"fields\":[{\"name\":\"min\",\"type\":\"long\"},{\"name\":\"max\",\"type\":\"long\"}]}]},{\"name\":\"alert\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"colormode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"mode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"reachable\",\"type\":\"boolean\"}]}},{\"name\":\"swupdate\",\"type\":{\"type\":\"record\",\"name\":\"SoftwareUpdate\",\"fields\":[{\"name\":\"state\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"lastinstall\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}},{\"name\":\"type\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"modelid\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"manufacturername\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"productname\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"capabilities\",\"type\":{\"type\":\"record\",\"name\":\"Capabilities\",\"fields\":[{\"name\":\"certified\",\"type\":\"boolean\"},{\"name\":\"control\",\"type\":{\"type\":\"record\",\"name\":\"Control\",\"fields\":[{\"name\":\"mindimlevel\",\"type\":\"long\"},{\"name\":\"maxlumen\",\"type\":\"long\"},{\"name\":\"colorgamuttype\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"colorgamut\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":\"double\"}}},{\"name\":\"ct\",\"type\":\"Ct\"}]}},{\"name\":\"streaming\",\"type\":{\"type\":\"record\",\"name\":\"Streaming\",\"fields\":[{\"name\":\"renderer\",\"type\":\"boolean\"},{\"name\":\"proxy\",\"type\":\"boolean\"}]}}]}},{\"name\":\"config\",\"type\":{\"type\":\"record\",\"name\":\"Config\",\"fields\":[{\"name\":\"archetype\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"function\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"direction\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"startup\",\"type\":{\"type\":\"record\",\"name\":\"Startup\",\"fields\":[{\"name\":\"mode\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"configured\",\"type\":\"boolean\"}]}}]}},{\"name\":\"uniqueid\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"swversion\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"swconfigid\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"productid\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Light> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Light> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Light> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Light> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Light> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Light to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Light from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Light instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Light fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  public int id;
  public my.example.hue.State state;
  public my.example.hue.SoftwareUpdate swupdate;
  public java.lang.String type;
  public java.lang.String name;
  public java.lang.String modelid;
  public java.lang.String manufacturername;
  public java.lang.String productname;
  public my.example.hue.Capabilities capabilities;
  public my.example.hue.Config config;
  public java.lang.String uniqueid;
  public java.lang.String swversion;
  public java.lang.String swconfigid;
  public java.lang.String productid;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Light() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param state The new value for state
   * @param swupdate The new value for swupdate
   * @param type The new value for type
   * @param name The new value for name
   * @param modelid The new value for modelid
   * @param manufacturername The new value for manufacturername
   * @param productname The new value for productname
   * @param capabilities The new value for capabilities
   * @param config The new value for config
   * @param uniqueid The new value for uniqueid
   * @param swversion The new value for swversion
   * @param swconfigid The new value for swconfigid
   * @param productid The new value for productid
   */
  public Light(java.lang.Integer id, my.example.hue.State state, my.example.hue.SoftwareUpdate swupdate, java.lang.String type, java.lang.String name, java.lang.String modelid, java.lang.String manufacturername, java.lang.String productname, my.example.hue.Capabilities capabilities, my.example.hue.Config config, java.lang.String uniqueid, java.lang.String swversion, java.lang.String swconfigid, java.lang.String productid) {
    this.id = id;
    this.state = state;
    this.swupdate = swupdate;
    this.type = type;
    this.name = name;
    this.modelid = modelid;
    this.manufacturername = manufacturername;
    this.productname = productname;
    this.capabilities = capabilities;
    this.config = config;
    this.uniqueid = uniqueid;
    this.swversion = swversion;
    this.swconfigid = swconfigid;
    this.productid = productid;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return state;
    case 2: return swupdate;
    case 3: return type;
    case 4: return name;
    case 5: return modelid;
    case 6: return manufacturername;
    case 7: return productname;
    case 8: return capabilities;
    case 9: return config;
    case 10: return uniqueid;
    case 11: return swversion;
    case 12: return swconfigid;
    case 13: return productid;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Integer)value$; break;
    case 1: state = (my.example.hue.State)value$; break;
    case 2: swupdate = (my.example.hue.SoftwareUpdate)value$; break;
    case 3: type = value$ != null ? value$.toString() : null; break;
    case 4: name = value$ != null ? value$.toString() : null; break;
    case 5: modelid = value$ != null ? value$.toString() : null; break;
    case 6: manufacturername = value$ != null ? value$.toString() : null; break;
    case 7: productname = value$ != null ? value$.toString() : null; break;
    case 8: capabilities = (my.example.hue.Capabilities)value$; break;
    case 9: config = (my.example.hue.Config)value$; break;
    case 10: uniqueid = value$ != null ? value$.toString() : null; break;
    case 11: swversion = value$ != null ? value$.toString() : null; break;
    case 12: swconfigid = value$ != null ? value$.toString() : null; break;
    case 13: productid = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public int getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(int value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'state' field.
   * @return The value of the 'state' field.
   */
  public my.example.hue.State getState() {
    return state;
  }


  /**
   * Sets the value of the 'state' field.
   * @param value the value to set.
   */
  public void setState(my.example.hue.State value) {
    this.state = value;
  }

  /**
   * Gets the value of the 'swupdate' field.
   * @return The value of the 'swupdate' field.
   */
  public my.example.hue.SoftwareUpdate getSwupdate() {
    return swupdate;
  }


  /**
   * Sets the value of the 'swupdate' field.
   * @param value the value to set.
   */
  public void setSwupdate(my.example.hue.SoftwareUpdate value) {
    this.swupdate = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return The value of the 'type' field.
   */
  public java.lang.String getType() {
    return type;
  }


  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(java.lang.String value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.String getName() {
    return name;
  }


  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.String value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'modelid' field.
   * @return The value of the 'modelid' field.
   */
  public java.lang.String getModelid() {
    return modelid;
  }


  /**
   * Sets the value of the 'modelid' field.
   * @param value the value to set.
   */
  public void setModelid(java.lang.String value) {
    this.modelid = value;
  }

  /**
   * Gets the value of the 'manufacturername' field.
   * @return The value of the 'manufacturername' field.
   */
  public java.lang.String getManufacturername() {
    return manufacturername;
  }


  /**
   * Sets the value of the 'manufacturername' field.
   * @param value the value to set.
   */
  public void setManufacturername(java.lang.String value) {
    this.manufacturername = value;
  }

  /**
   * Gets the value of the 'productname' field.
   * @return The value of the 'productname' field.
   */
  public java.lang.String getProductname() {
    return productname;
  }


  /**
   * Sets the value of the 'productname' field.
   * @param value the value to set.
   */
  public void setProductname(java.lang.String value) {
    this.productname = value;
  }

  /**
   * Gets the value of the 'capabilities' field.
   * @return The value of the 'capabilities' field.
   */
  public my.example.hue.Capabilities getCapabilities() {
    return capabilities;
  }


  /**
   * Sets the value of the 'capabilities' field.
   * @param value the value to set.
   */
  public void setCapabilities(my.example.hue.Capabilities value) {
    this.capabilities = value;
  }

  /**
   * Gets the value of the 'config' field.
   * @return The value of the 'config' field.
   */
  public my.example.hue.Config getConfig() {
    return config;
  }


  /**
   * Sets the value of the 'config' field.
   * @param value the value to set.
   */
  public void setConfig(my.example.hue.Config value) {
    this.config = value;
  }

  /**
   * Gets the value of the 'uniqueid' field.
   * @return The value of the 'uniqueid' field.
   */
  public java.lang.String getUniqueid() {
    return uniqueid;
  }


  /**
   * Sets the value of the 'uniqueid' field.
   * @param value the value to set.
   */
  public void setUniqueid(java.lang.String value) {
    this.uniqueid = value;
  }

  /**
   * Gets the value of the 'swversion' field.
   * @return The value of the 'swversion' field.
   */
  public java.lang.String getSwversion() {
    return swversion;
  }


  /**
   * Sets the value of the 'swversion' field.
   * @param value the value to set.
   */
  public void setSwversion(java.lang.String value) {
    this.swversion = value;
  }

  /**
   * Gets the value of the 'swconfigid' field.
   * @return The value of the 'swconfigid' field.
   */
  public java.lang.String getSwconfigid() {
    return swconfigid;
  }


  /**
   * Sets the value of the 'swconfigid' field.
   * @param value the value to set.
   */
  public void setSwconfigid(java.lang.String value) {
    this.swconfigid = value;
  }

  /**
   * Gets the value of the 'productid' field.
   * @return The value of the 'productid' field.
   */
  public java.lang.String getProductid() {
    return productid;
  }


  /**
   * Sets the value of the 'productid' field.
   * @param value the value to set.
   */
  public void setProductid(java.lang.String value) {
    this.productid = value;
  }

  /**
   * Creates a new Light RecordBuilder.
   * @return A new Light RecordBuilder
   */
  public static my.example.hue.Light.Builder newBuilder() {
    return new my.example.hue.Light.Builder();
  }

  /**
   * Creates a new Light RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Light RecordBuilder
   */
  public static my.example.hue.Light.Builder newBuilder(my.example.hue.Light.Builder other) {
    if (other == null) {
      return new my.example.hue.Light.Builder();
    } else {
      return new my.example.hue.Light.Builder(other);
    }
  }

  /**
   * Creates a new Light RecordBuilder by copying an existing Light instance.
   * @param other The existing instance to copy.
   * @return A new Light RecordBuilder
   */
  public static my.example.hue.Light.Builder newBuilder(my.example.hue.Light other) {
    if (other == null) {
      return new my.example.hue.Light.Builder();
    } else {
      return new my.example.hue.Light.Builder(other);
    }
  }

  /**
   * RecordBuilder for Light instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Light>
    implements org.apache.avro.data.RecordBuilder<Light> {

    private int id;
    private my.example.hue.State state;
    private my.example.hue.State.Builder stateBuilder;
    private my.example.hue.SoftwareUpdate swupdate;
    private my.example.hue.SoftwareUpdate.Builder swupdateBuilder;
    private java.lang.String type;
    private java.lang.String name;
    private java.lang.String modelid;
    private java.lang.String manufacturername;
    private java.lang.String productname;
    private my.example.hue.Capabilities capabilities;
    private my.example.hue.Capabilities.Builder capabilitiesBuilder;
    private my.example.hue.Config config;
    private my.example.hue.Config.Builder configBuilder;
    private java.lang.String uniqueid;
    private java.lang.String swversion;
    private java.lang.String swconfigid;
    private java.lang.String productid;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(my.example.hue.Light.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.state)) {
        this.state = data().deepCopy(fields()[1].schema(), other.state);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasStateBuilder()) {
        this.stateBuilder = my.example.hue.State.newBuilder(other.getStateBuilder());
      }
      if (isValidValue(fields()[2], other.swupdate)) {
        this.swupdate = data().deepCopy(fields()[2].schema(), other.swupdate);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (other.hasSwupdateBuilder()) {
        this.swupdateBuilder = my.example.hue.SoftwareUpdate.newBuilder(other.getSwupdateBuilder());
      }
      if (isValidValue(fields()[3], other.type)) {
        this.type = data().deepCopy(fields()[3].schema(), other.type);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.name)) {
        this.name = data().deepCopy(fields()[4].schema(), other.name);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.modelid)) {
        this.modelid = data().deepCopy(fields()[5].schema(), other.modelid);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.manufacturername)) {
        this.manufacturername = data().deepCopy(fields()[6].schema(), other.manufacturername);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.productname)) {
        this.productname = data().deepCopy(fields()[7].schema(), other.productname);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.capabilities)) {
        this.capabilities = data().deepCopy(fields()[8].schema(), other.capabilities);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (other.hasCapabilitiesBuilder()) {
        this.capabilitiesBuilder = my.example.hue.Capabilities.newBuilder(other.getCapabilitiesBuilder());
      }
      if (isValidValue(fields()[9], other.config)) {
        this.config = data().deepCopy(fields()[9].schema(), other.config);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (other.hasConfigBuilder()) {
        this.configBuilder = my.example.hue.Config.newBuilder(other.getConfigBuilder());
      }
      if (isValidValue(fields()[10], other.uniqueid)) {
        this.uniqueid = data().deepCopy(fields()[10].schema(), other.uniqueid);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.swversion)) {
        this.swversion = data().deepCopy(fields()[11].schema(), other.swversion);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.swconfigid)) {
        this.swconfigid = data().deepCopy(fields()[12].schema(), other.swconfigid);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.productid)) {
        this.productid = data().deepCopy(fields()[13].schema(), other.productid);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
    }

    /**
     * Creates a Builder by copying an existing Light instance
     * @param other The existing instance to copy.
     */
    private Builder(my.example.hue.Light other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.state)) {
        this.state = data().deepCopy(fields()[1].schema(), other.state);
        fieldSetFlags()[1] = true;
      }
      this.stateBuilder = null;
      if (isValidValue(fields()[2], other.swupdate)) {
        this.swupdate = data().deepCopy(fields()[2].schema(), other.swupdate);
        fieldSetFlags()[2] = true;
      }
      this.swupdateBuilder = null;
      if (isValidValue(fields()[3], other.type)) {
        this.type = data().deepCopy(fields()[3].schema(), other.type);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.name)) {
        this.name = data().deepCopy(fields()[4].schema(), other.name);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.modelid)) {
        this.modelid = data().deepCopy(fields()[5].schema(), other.modelid);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.manufacturername)) {
        this.manufacturername = data().deepCopy(fields()[6].schema(), other.manufacturername);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.productname)) {
        this.productname = data().deepCopy(fields()[7].schema(), other.productname);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.capabilities)) {
        this.capabilities = data().deepCopy(fields()[8].schema(), other.capabilities);
        fieldSetFlags()[8] = true;
      }
      this.capabilitiesBuilder = null;
      if (isValidValue(fields()[9], other.config)) {
        this.config = data().deepCopy(fields()[9].schema(), other.config);
        fieldSetFlags()[9] = true;
      }
      this.configBuilder = null;
      if (isValidValue(fields()[10], other.uniqueid)) {
        this.uniqueid = data().deepCopy(fields()[10].schema(), other.uniqueid);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.swversion)) {
        this.swversion = data().deepCopy(fields()[11].schema(), other.swversion);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.swconfigid)) {
        this.swconfigid = data().deepCopy(fields()[12].schema(), other.swconfigid);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.productid)) {
        this.productid = data().deepCopy(fields()[13].schema(), other.productid);
        fieldSetFlags()[13] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public int getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public my.example.hue.Light.Builder setId(int value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public my.example.hue.Light.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'state' field.
      * @return The value.
      */
    public my.example.hue.State getState() {
      return state;
    }


    /**
      * Sets the value of the 'state' field.
      * @param value The value of 'state'.
      * @return This builder.
      */
    public my.example.hue.Light.Builder setState(my.example.hue.State value) {
      validate(fields()[1], value);
      this.stateBuilder = null;
      this.state = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'state' field has been set.
      * @return True if the 'state' field has been set, false otherwise.
      */
    public boolean hasState() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'state' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public my.example.hue.State.Builder getStateBuilder() {
      if (stateBuilder == null) {
        if (hasState()) {
          setStateBuilder(my.example.hue.State.newBuilder(state));
        } else {
          setStateBuilder(my.example.hue.State.newBuilder());
        }
      }
      return stateBuilder;
    }

    /**
     * Sets the Builder instance for the 'state' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public my.example.hue.Light.Builder setStateBuilder(my.example.hue.State.Builder value) {
      clearState();
      stateBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'state' field has an active Builder instance
     * @return True if the 'state' field has an active Builder instance
     */
    public boolean hasStateBuilder() {
      return stateBuilder != null;
    }

    /**
      * Clears the value of the 'state' field.
      * @return This builder.
      */
    public my.example.hue.Light.Builder clearState() {
      state = null;
      stateBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'swupdate' field.
      * @return The value.
      */
    public my.example.hue.SoftwareUpdate getSwupdate() {
      return swupdate;
    }


    /**
      * Sets the value of the 'swupdate' field.
      * @param value The value of 'swupdate'.
      * @return This builder.
      */
    public my.example.hue.Light.Builder setSwupdate(my.example.hue.SoftwareUpdate value) {
      validate(fields()[2], value);
      this.swupdateBuilder = null;
      this.swupdate = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'swupdate' field has been set.
      * @return True if the 'swupdate' field has been set, false otherwise.
      */
    public boolean hasSwupdate() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'swupdate' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public my.example.hue.SoftwareUpdate.Builder getSwupdateBuilder() {
      if (swupdateBuilder == null) {
        if (hasSwupdate()) {
          setSwupdateBuilder(my.example.hue.SoftwareUpdate.newBuilder(swupdate));
        } else {
          setSwupdateBuilder(my.example.hue.SoftwareUpdate.newBuilder());
        }
      }
      return swupdateBuilder;
    }

    /**
     * Sets the Builder instance for the 'swupdate' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public my.example.hue.Light.Builder setSwupdateBuilder(my.example.hue.SoftwareUpdate.Builder value) {
      clearSwupdate();
      swupdateBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'swupdate' field has an active Builder instance
     * @return True if the 'swupdate' field has an active Builder instance
     */
    public boolean hasSwupdateBuilder() {
      return swupdateBuilder != null;
    }

    /**
      * Clears the value of the 'swupdate' field.
      * @return This builder.
      */
    public my.example.hue.Light.Builder clearSwupdate() {
      swupdate = null;
      swupdateBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * @return The value.
      */
    public java.lang.String getType() {
      return type;
    }


    /**
      * Sets the value of the 'type' field.
      * @param value The value of 'type'.
      * @return This builder.
      */
    public my.example.hue.Light.Builder setType(java.lang.String value) {
      validate(fields()[3], value);
      this.type = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'type' field.
      * @return This builder.
      */
    public my.example.hue.Light.Builder clearType() {
      type = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.String getName() {
      return name;
    }


    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public my.example.hue.Light.Builder setName(java.lang.String value) {
      validate(fields()[4], value);
      this.name = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public my.example.hue.Light.Builder clearName() {
      name = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'modelid' field.
      * @return The value.
      */
    public java.lang.String getModelid() {
      return modelid;
    }


    /**
      * Sets the value of the 'modelid' field.
      * @param value The value of 'modelid'.
      * @return This builder.
      */
    public my.example.hue.Light.Builder setModelid(java.lang.String value) {
      validate(fields()[5], value);
      this.modelid = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'modelid' field has been set.
      * @return True if the 'modelid' field has been set, false otherwise.
      */
    public boolean hasModelid() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'modelid' field.
      * @return This builder.
      */
    public my.example.hue.Light.Builder clearModelid() {
      modelid = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'manufacturername' field.
      * @return The value.
      */
    public java.lang.String getManufacturername() {
      return manufacturername;
    }


    /**
      * Sets the value of the 'manufacturername' field.
      * @param value The value of 'manufacturername'.
      * @return This builder.
      */
    public my.example.hue.Light.Builder setManufacturername(java.lang.String value) {
      validate(fields()[6], value);
      this.manufacturername = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'manufacturername' field has been set.
      * @return True if the 'manufacturername' field has been set, false otherwise.
      */
    public boolean hasManufacturername() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'manufacturername' field.
      * @return This builder.
      */
    public my.example.hue.Light.Builder clearManufacturername() {
      manufacturername = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'productname' field.
      * @return The value.
      */
    public java.lang.String getProductname() {
      return productname;
    }


    /**
      * Sets the value of the 'productname' field.
      * @param value The value of 'productname'.
      * @return This builder.
      */
    public my.example.hue.Light.Builder setProductname(java.lang.String value) {
      validate(fields()[7], value);
      this.productname = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'productname' field has been set.
      * @return True if the 'productname' field has been set, false otherwise.
      */
    public boolean hasProductname() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'productname' field.
      * @return This builder.
      */
    public my.example.hue.Light.Builder clearProductname() {
      productname = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'capabilities' field.
      * @return The value.
      */
    public my.example.hue.Capabilities getCapabilities() {
      return capabilities;
    }


    /**
      * Sets the value of the 'capabilities' field.
      * @param value The value of 'capabilities'.
      * @return This builder.
      */
    public my.example.hue.Light.Builder setCapabilities(my.example.hue.Capabilities value) {
      validate(fields()[8], value);
      this.capabilitiesBuilder = null;
      this.capabilities = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'capabilities' field has been set.
      * @return True if the 'capabilities' field has been set, false otherwise.
      */
    public boolean hasCapabilities() {
      return fieldSetFlags()[8];
    }

    /**
     * Gets the Builder instance for the 'capabilities' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public my.example.hue.Capabilities.Builder getCapabilitiesBuilder() {
      if (capabilitiesBuilder == null) {
        if (hasCapabilities()) {
          setCapabilitiesBuilder(my.example.hue.Capabilities.newBuilder(capabilities));
        } else {
          setCapabilitiesBuilder(my.example.hue.Capabilities.newBuilder());
        }
      }
      return capabilitiesBuilder;
    }

    /**
     * Sets the Builder instance for the 'capabilities' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public my.example.hue.Light.Builder setCapabilitiesBuilder(my.example.hue.Capabilities.Builder value) {
      clearCapabilities();
      capabilitiesBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'capabilities' field has an active Builder instance
     * @return True if the 'capabilities' field has an active Builder instance
     */
    public boolean hasCapabilitiesBuilder() {
      return capabilitiesBuilder != null;
    }

    /**
      * Clears the value of the 'capabilities' field.
      * @return This builder.
      */
    public my.example.hue.Light.Builder clearCapabilities() {
      capabilities = null;
      capabilitiesBuilder = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'config' field.
      * @return The value.
      */
    public my.example.hue.Config getConfig() {
      return config;
    }


    /**
      * Sets the value of the 'config' field.
      * @param value The value of 'config'.
      * @return This builder.
      */
    public my.example.hue.Light.Builder setConfig(my.example.hue.Config value) {
      validate(fields()[9], value);
      this.configBuilder = null;
      this.config = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'config' field has been set.
      * @return True if the 'config' field has been set, false otherwise.
      */
    public boolean hasConfig() {
      return fieldSetFlags()[9];
    }

    /**
     * Gets the Builder instance for the 'config' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public my.example.hue.Config.Builder getConfigBuilder() {
      if (configBuilder == null) {
        if (hasConfig()) {
          setConfigBuilder(my.example.hue.Config.newBuilder(config));
        } else {
          setConfigBuilder(my.example.hue.Config.newBuilder());
        }
      }
      return configBuilder;
    }

    /**
     * Sets the Builder instance for the 'config' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public my.example.hue.Light.Builder setConfigBuilder(my.example.hue.Config.Builder value) {
      clearConfig();
      configBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'config' field has an active Builder instance
     * @return True if the 'config' field has an active Builder instance
     */
    public boolean hasConfigBuilder() {
      return configBuilder != null;
    }

    /**
      * Clears the value of the 'config' field.
      * @return This builder.
      */
    public my.example.hue.Light.Builder clearConfig() {
      config = null;
      configBuilder = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'uniqueid' field.
      * @return The value.
      */
    public java.lang.String getUniqueid() {
      return uniqueid;
    }


    /**
      * Sets the value of the 'uniqueid' field.
      * @param value The value of 'uniqueid'.
      * @return This builder.
      */
    public my.example.hue.Light.Builder setUniqueid(java.lang.String value) {
      validate(fields()[10], value);
      this.uniqueid = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'uniqueid' field has been set.
      * @return True if the 'uniqueid' field has been set, false otherwise.
      */
    public boolean hasUniqueid() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'uniqueid' field.
      * @return This builder.
      */
    public my.example.hue.Light.Builder clearUniqueid() {
      uniqueid = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'swversion' field.
      * @return The value.
      */
    public java.lang.String getSwversion() {
      return swversion;
    }


    /**
      * Sets the value of the 'swversion' field.
      * @param value The value of 'swversion'.
      * @return This builder.
      */
    public my.example.hue.Light.Builder setSwversion(java.lang.String value) {
      validate(fields()[11], value);
      this.swversion = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'swversion' field has been set.
      * @return True if the 'swversion' field has been set, false otherwise.
      */
    public boolean hasSwversion() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'swversion' field.
      * @return This builder.
      */
    public my.example.hue.Light.Builder clearSwversion() {
      swversion = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'swconfigid' field.
      * @return The value.
      */
    public java.lang.String getSwconfigid() {
      return swconfigid;
    }


    /**
      * Sets the value of the 'swconfigid' field.
      * @param value The value of 'swconfigid'.
      * @return This builder.
      */
    public my.example.hue.Light.Builder setSwconfigid(java.lang.String value) {
      validate(fields()[12], value);
      this.swconfigid = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'swconfigid' field has been set.
      * @return True if the 'swconfigid' field has been set, false otherwise.
      */
    public boolean hasSwconfigid() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'swconfigid' field.
      * @return This builder.
      */
    public my.example.hue.Light.Builder clearSwconfigid() {
      swconfigid = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'productid' field.
      * @return The value.
      */
    public java.lang.String getProductid() {
      return productid;
    }


    /**
      * Sets the value of the 'productid' field.
      * @param value The value of 'productid'.
      * @return This builder.
      */
    public my.example.hue.Light.Builder setProductid(java.lang.String value) {
      validate(fields()[13], value);
      this.productid = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'productid' field has been set.
      * @return True if the 'productid' field has been set, false otherwise.
      */
    public boolean hasProductid() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'productid' field.
      * @return This builder.
      */
    public my.example.hue.Light.Builder clearProductid() {
      productid = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Light build() {
      try {
        Light record = new Light();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Integer) defaultValue(fields()[0]);
        if (stateBuilder != null) {
          try {
            record.state = this.stateBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("state"));
            throw e;
          }
        } else {
          record.state = fieldSetFlags()[1] ? this.state : (my.example.hue.State) defaultValue(fields()[1]);
        }
        if (swupdateBuilder != null) {
          try {
            record.swupdate = this.swupdateBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("swupdate"));
            throw e;
          }
        } else {
          record.swupdate = fieldSetFlags()[2] ? this.swupdate : (my.example.hue.SoftwareUpdate) defaultValue(fields()[2]);
        }
        record.type = fieldSetFlags()[3] ? this.type : (java.lang.String) defaultValue(fields()[3]);
        record.name = fieldSetFlags()[4] ? this.name : (java.lang.String) defaultValue(fields()[4]);
        record.modelid = fieldSetFlags()[5] ? this.modelid : (java.lang.String) defaultValue(fields()[5]);
        record.manufacturername = fieldSetFlags()[6] ? this.manufacturername : (java.lang.String) defaultValue(fields()[6]);
        record.productname = fieldSetFlags()[7] ? this.productname : (java.lang.String) defaultValue(fields()[7]);
        if (capabilitiesBuilder != null) {
          try {
            record.capabilities = this.capabilitiesBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("capabilities"));
            throw e;
          }
        } else {
          record.capabilities = fieldSetFlags()[8] ? this.capabilities : (my.example.hue.Capabilities) defaultValue(fields()[8]);
        }
        if (configBuilder != null) {
          try {
            record.config = this.configBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("config"));
            throw e;
          }
        } else {
          record.config = fieldSetFlags()[9] ? this.config : (my.example.hue.Config) defaultValue(fields()[9]);
        }
        record.uniqueid = fieldSetFlags()[10] ? this.uniqueid : (java.lang.String) defaultValue(fields()[10]);
        record.swversion = fieldSetFlags()[11] ? this.swversion : (java.lang.String) defaultValue(fields()[11]);
        record.swconfigid = fieldSetFlags()[12] ? this.swconfigid : (java.lang.String) defaultValue(fields()[12]);
        record.productid = fieldSetFlags()[13] ? this.productid : (java.lang.String) defaultValue(fields()[13]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Light>
    WRITER$ = (org.apache.avro.io.DatumWriter<Light>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Light>
    READER$ = (org.apache.avro.io.DatumReader<Light>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeInt(this.id);

    this.state.customEncode(out);

    this.swupdate.customEncode(out);

    out.writeString(this.type);

    out.writeString(this.name);

    out.writeString(this.modelid);

    out.writeString(this.manufacturername);

    out.writeString(this.productname);

    this.capabilities.customEncode(out);

    this.config.customEncode(out);

    out.writeString(this.uniqueid);

    out.writeString(this.swversion);

    out.writeString(this.swconfigid);

    out.writeString(this.productid);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.id = in.readInt();

      if (this.state == null) {
        this.state = new my.example.hue.State();
      }
      this.state.customDecode(in);

      if (this.swupdate == null) {
        this.swupdate = new my.example.hue.SoftwareUpdate();
      }
      this.swupdate.customDecode(in);

      this.type = in.readString();

      this.name = in.readString();

      this.modelid = in.readString();

      this.manufacturername = in.readString();

      this.productname = in.readString();

      if (this.capabilities == null) {
        this.capabilities = new my.example.hue.Capabilities();
      }
      this.capabilities.customDecode(in);

      if (this.config == null) {
        this.config = new my.example.hue.Config();
      }
      this.config.customDecode(in);

      this.uniqueid = in.readString();

      this.swversion = in.readString();

      this.swconfigid = in.readString();

      this.productid = in.readString();

    } else {
      for (int i = 0; i < 14; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.id = in.readInt();
          break;

        case 1:
          if (this.state == null) {
            this.state = new my.example.hue.State();
          }
          this.state.customDecode(in);
          break;

        case 2:
          if (this.swupdate == null) {
            this.swupdate = new my.example.hue.SoftwareUpdate();
          }
          this.swupdate.customDecode(in);
          break;

        case 3:
          this.type = in.readString();
          break;

        case 4:
          this.name = in.readString();
          break;

        case 5:
          this.modelid = in.readString();
          break;

        case 6:
          this.manufacturername = in.readString();
          break;

        case 7:
          this.productname = in.readString();
          break;

        case 8:
          if (this.capabilities == null) {
            this.capabilities = new my.example.hue.Capabilities();
          }
          this.capabilities.customDecode(in);
          break;

        case 9:
          if (this.config == null) {
            this.config = new my.example.hue.Config();
          }
          this.config.customDecode(in);
          break;

        case 10:
          this.uniqueid = in.readString();
          break;

        case 11:
          this.swversion = in.readString();
          break;

        case 12:
          this.swconfigid = in.readString();
          break;

        case 13:
          this.productid = in.readString();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










