/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package my.example.hue;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Config extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6340974852236640485L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Config\",\"namespace\":\"my.example.hue\",\"fields\":[{\"name\":\"archetype\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"function\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"direction\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"startup\",\"type\":{\"type\":\"record\",\"name\":\"Startup\",\"fields\":[{\"name\":\"mode\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"configured\",\"type\":\"boolean\"}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Config> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Config> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Config> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Config> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Config> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Config to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Config from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Config instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Config fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  public java.lang.String archetype;
  public java.lang.String function;
  public java.lang.String direction;
  public my.example.hue.Startup startup;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Config() {}

  /**
   * All-args constructor.
   * @param archetype The new value for archetype
   * @param function The new value for function
   * @param direction The new value for direction
   * @param startup The new value for startup
   */
  public Config(java.lang.String archetype, java.lang.String function, java.lang.String direction, my.example.hue.Startup startup) {
    this.archetype = archetype;
    this.function = function;
    this.direction = direction;
    this.startup = startup;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return archetype;
    case 1: return function;
    case 2: return direction;
    case 3: return startup;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: archetype = value$ != null ? value$.toString() : null; break;
    case 1: function = value$ != null ? value$.toString() : null; break;
    case 2: direction = value$ != null ? value$.toString() : null; break;
    case 3: startup = (my.example.hue.Startup)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'archetype' field.
   * @return The value of the 'archetype' field.
   */
  public java.lang.String getArchetype() {
    return archetype;
  }


  /**
   * Sets the value of the 'archetype' field.
   * @param value the value to set.
   */
  public void setArchetype(java.lang.String value) {
    this.archetype = value;
  }

  /**
   * Gets the value of the 'function' field.
   * @return The value of the 'function' field.
   */
  public java.lang.String getFunction() {
    return function;
  }


  /**
   * Sets the value of the 'function' field.
   * @param value the value to set.
   */
  public void setFunction(java.lang.String value) {
    this.function = value;
  }

  /**
   * Gets the value of the 'direction' field.
   * @return The value of the 'direction' field.
   */
  public java.lang.String getDirection() {
    return direction;
  }


  /**
   * Sets the value of the 'direction' field.
   * @param value the value to set.
   */
  public void setDirection(java.lang.String value) {
    this.direction = value;
  }

  /**
   * Gets the value of the 'startup' field.
   * @return The value of the 'startup' field.
   */
  public my.example.hue.Startup getStartup() {
    return startup;
  }


  /**
   * Sets the value of the 'startup' field.
   * @param value the value to set.
   */
  public void setStartup(my.example.hue.Startup value) {
    this.startup = value;
  }

  /**
   * Creates a new Config RecordBuilder.
   * @return A new Config RecordBuilder
   */
  public static my.example.hue.Config.Builder newBuilder() {
    return new my.example.hue.Config.Builder();
  }

  /**
   * Creates a new Config RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Config RecordBuilder
   */
  public static my.example.hue.Config.Builder newBuilder(my.example.hue.Config.Builder other) {
    if (other == null) {
      return new my.example.hue.Config.Builder();
    } else {
      return new my.example.hue.Config.Builder(other);
    }
  }

  /**
   * Creates a new Config RecordBuilder by copying an existing Config instance.
   * @param other The existing instance to copy.
   * @return A new Config RecordBuilder
   */
  public static my.example.hue.Config.Builder newBuilder(my.example.hue.Config other) {
    if (other == null) {
      return new my.example.hue.Config.Builder();
    } else {
      return new my.example.hue.Config.Builder(other);
    }
  }

  /**
   * RecordBuilder for Config instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Config>
    implements org.apache.avro.data.RecordBuilder<Config> {

    private java.lang.String archetype;
    private java.lang.String function;
    private java.lang.String direction;
    private my.example.hue.Startup startup;
    private my.example.hue.Startup.Builder startupBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(my.example.hue.Config.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.archetype)) {
        this.archetype = data().deepCopy(fields()[0].schema(), other.archetype);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.function)) {
        this.function = data().deepCopy(fields()[1].schema(), other.function);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.direction)) {
        this.direction = data().deepCopy(fields()[2].schema(), other.direction);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.startup)) {
        this.startup = data().deepCopy(fields()[3].schema(), other.startup);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (other.hasStartupBuilder()) {
        this.startupBuilder = my.example.hue.Startup.newBuilder(other.getStartupBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing Config instance
     * @param other The existing instance to copy.
     */
    private Builder(my.example.hue.Config other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.archetype)) {
        this.archetype = data().deepCopy(fields()[0].schema(), other.archetype);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.function)) {
        this.function = data().deepCopy(fields()[1].schema(), other.function);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.direction)) {
        this.direction = data().deepCopy(fields()[2].schema(), other.direction);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.startup)) {
        this.startup = data().deepCopy(fields()[3].schema(), other.startup);
        fieldSetFlags()[3] = true;
      }
      this.startupBuilder = null;
    }

    /**
      * Gets the value of the 'archetype' field.
      * @return The value.
      */
    public java.lang.String getArchetype() {
      return archetype;
    }


    /**
      * Sets the value of the 'archetype' field.
      * @param value The value of 'archetype'.
      * @return This builder.
      */
    public my.example.hue.Config.Builder setArchetype(java.lang.String value) {
      validate(fields()[0], value);
      this.archetype = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'archetype' field has been set.
      * @return True if the 'archetype' field has been set, false otherwise.
      */
    public boolean hasArchetype() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'archetype' field.
      * @return This builder.
      */
    public my.example.hue.Config.Builder clearArchetype() {
      archetype = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'function' field.
      * @return The value.
      */
    public java.lang.String getFunction() {
      return function;
    }


    /**
      * Sets the value of the 'function' field.
      * @param value The value of 'function'.
      * @return This builder.
      */
    public my.example.hue.Config.Builder setFunction(java.lang.String value) {
      validate(fields()[1], value);
      this.function = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'function' field has been set.
      * @return True if the 'function' field has been set, false otherwise.
      */
    public boolean hasFunction() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'function' field.
      * @return This builder.
      */
    public my.example.hue.Config.Builder clearFunction() {
      function = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'direction' field.
      * @return The value.
      */
    public java.lang.String getDirection() {
      return direction;
    }


    /**
      * Sets the value of the 'direction' field.
      * @param value The value of 'direction'.
      * @return This builder.
      */
    public my.example.hue.Config.Builder setDirection(java.lang.String value) {
      validate(fields()[2], value);
      this.direction = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'direction' field has been set.
      * @return True if the 'direction' field has been set, false otherwise.
      */
    public boolean hasDirection() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'direction' field.
      * @return This builder.
      */
    public my.example.hue.Config.Builder clearDirection() {
      direction = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'startup' field.
      * @return The value.
      */
    public my.example.hue.Startup getStartup() {
      return startup;
    }


    /**
      * Sets the value of the 'startup' field.
      * @param value The value of 'startup'.
      * @return This builder.
      */
    public my.example.hue.Config.Builder setStartup(my.example.hue.Startup value) {
      validate(fields()[3], value);
      this.startupBuilder = null;
      this.startup = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'startup' field has been set.
      * @return True if the 'startup' field has been set, false otherwise.
      */
    public boolean hasStartup() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'startup' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public my.example.hue.Startup.Builder getStartupBuilder() {
      if (startupBuilder == null) {
        if (hasStartup()) {
          setStartupBuilder(my.example.hue.Startup.newBuilder(startup));
        } else {
          setStartupBuilder(my.example.hue.Startup.newBuilder());
        }
      }
      return startupBuilder;
    }

    /**
     * Sets the Builder instance for the 'startup' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public my.example.hue.Config.Builder setStartupBuilder(my.example.hue.Startup.Builder value) {
      clearStartup();
      startupBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'startup' field has an active Builder instance
     * @return True if the 'startup' field has an active Builder instance
     */
    public boolean hasStartupBuilder() {
      return startupBuilder != null;
    }

    /**
      * Clears the value of the 'startup' field.
      * @return This builder.
      */
    public my.example.hue.Config.Builder clearStartup() {
      startup = null;
      startupBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Config build() {
      try {
        Config record = new Config();
        record.archetype = fieldSetFlags()[0] ? this.archetype : (java.lang.String) defaultValue(fields()[0]);
        record.function = fieldSetFlags()[1] ? this.function : (java.lang.String) defaultValue(fields()[1]);
        record.direction = fieldSetFlags()[2] ? this.direction : (java.lang.String) defaultValue(fields()[2]);
        if (startupBuilder != null) {
          try {
            record.startup = this.startupBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("startup"));
            throw e;
          }
        } else {
          record.startup = fieldSetFlags()[3] ? this.startup : (my.example.hue.Startup) defaultValue(fields()[3]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Config>
    WRITER$ = (org.apache.avro.io.DatumWriter<Config>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Config>
    READER$ = (org.apache.avro.io.DatumReader<Config>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.archetype == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.archetype);
    }

    if (this.function == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.function);
    }

    if (this.direction == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.direction);
    }

    this.startup.customEncode(out);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.archetype = null;
      } else {
        this.archetype = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.function = null;
      } else {
        this.function = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.direction = null;
      } else {
        this.direction = in.readString();
      }

      if (this.startup == null) {
        this.startup = new my.example.hue.Startup();
      }
      this.startup.customDecode(in);

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.archetype = null;
          } else {
            this.archetype = in.readString();
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.function = null;
          } else {
            this.function = in.readString();
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.direction = null;
          } else {
            this.direction = in.readString();
          }
          break;

        case 3:
          if (this.startup == null) {
            this.startup = new my.example.hue.Startup();
          }
          this.startup.customDecode(in);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










