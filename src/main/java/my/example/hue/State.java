/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package my.example.hue;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class State extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4460847600816331526L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"State\",\"namespace\":\"my.example.hue\",\"fields\":[{\"name\":\"on\",\"type\":\"boolean\"},{\"name\":\"bri\",\"type\":\"long\"},{\"name\":\"hue\",\"type\":\"long\"},{\"name\":\"sat\",\"type\":\"long\"},{\"name\":\"effect\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"xy\",\"type\":{\"type\":\"array\",\"items\":\"double\"}},{\"name\":\"ct\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Ct\",\"fields\":[{\"name\":\"min\",\"type\":\"long\"},{\"name\":\"max\",\"type\":\"long\"}]}]},{\"name\":\"alert\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"colormode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"mode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"reachable\",\"type\":\"boolean\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<State> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<State> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<State> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<State> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<State> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this State to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a State from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a State instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static State fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  public boolean on;
  public long bri;
  public long hue;
  public long sat;
  public java.lang.String effect;
  public java.util.List<java.lang.Double> xy;
  public my.example.hue.Ct ct;
  public java.lang.String alert;
  public java.lang.String colormode;
  public java.lang.String mode;
  public boolean reachable;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public State() {}

  /**
   * All-args constructor.
   * @param on The new value for on
   * @param bri The new value for bri
   * @param hue The new value for hue
   * @param sat The new value for sat
   * @param effect The new value for effect
   * @param xy The new value for xy
   * @param ct The new value for ct
   * @param alert The new value for alert
   * @param colormode The new value for colormode
   * @param mode The new value for mode
   * @param reachable The new value for reachable
   */
  public State(java.lang.Boolean on, java.lang.Long bri, java.lang.Long hue, java.lang.Long sat, java.lang.String effect, java.util.List<java.lang.Double> xy, my.example.hue.Ct ct, java.lang.String alert, java.lang.String colormode, java.lang.String mode, java.lang.Boolean reachable) {
    this.on = on;
    this.bri = bri;
    this.hue = hue;
    this.sat = sat;
    this.effect = effect;
    this.xy = xy;
    this.ct = ct;
    this.alert = alert;
    this.colormode = colormode;
    this.mode = mode;
    this.reachable = reachable;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return on;
    case 1: return bri;
    case 2: return hue;
    case 3: return sat;
    case 4: return effect;
    case 5: return xy;
    case 6: return ct;
    case 7: return alert;
    case 8: return colormode;
    case 9: return mode;
    case 10: return reachable;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: on = (java.lang.Boolean)value$; break;
    case 1: bri = (java.lang.Long)value$; break;
    case 2: hue = (java.lang.Long)value$; break;
    case 3: sat = (java.lang.Long)value$; break;
    case 4: effect = value$ != null ? value$.toString() : null; break;
    case 5: xy = (java.util.List<java.lang.Double>)value$; break;
    case 6: ct = (my.example.hue.Ct)value$; break;
    case 7: alert = value$ != null ? value$.toString() : null; break;
    case 8: colormode = value$ != null ? value$.toString() : null; break;
    case 9: mode = value$ != null ? value$.toString() : null; break;
    case 10: reachable = (java.lang.Boolean)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'on' field.
   * @return The value of the 'on' field.
   */
  public boolean getOn() {
    return on;
  }


  /**
   * Sets the value of the 'on' field.
   * @param value the value to set.
   */
  public void setOn(boolean value) {
    this.on = value;
  }

  /**
   * Gets the value of the 'bri' field.
   * @return The value of the 'bri' field.
   */
  public long getBri() {
    return bri;
  }


  /**
   * Sets the value of the 'bri' field.
   * @param value the value to set.
   */
  public void setBri(long value) {
    this.bri = value;
  }

  /**
   * Gets the value of the 'hue' field.
   * @return The value of the 'hue' field.
   */
  public long getHue() {
    return hue;
  }


  /**
   * Sets the value of the 'hue' field.
   * @param value the value to set.
   */
  public void setHue(long value) {
    this.hue = value;
  }

  /**
   * Gets the value of the 'sat' field.
   * @return The value of the 'sat' field.
   */
  public long getSat() {
    return sat;
  }


  /**
   * Sets the value of the 'sat' field.
   * @param value the value to set.
   */
  public void setSat(long value) {
    this.sat = value;
  }

  /**
   * Gets the value of the 'effect' field.
   * @return The value of the 'effect' field.
   */
  public java.lang.String getEffect() {
    return effect;
  }


  /**
   * Sets the value of the 'effect' field.
   * @param value the value to set.
   */
  public void setEffect(java.lang.String value) {
    this.effect = value;
  }

  /**
   * Gets the value of the 'xy' field.
   * @return The value of the 'xy' field.
   */
  public java.util.List<java.lang.Double> getXy() {
    return xy;
  }


  /**
   * Sets the value of the 'xy' field.
   * @param value the value to set.
   */
  public void setXy(java.util.List<java.lang.Double> value) {
    this.xy = value;
  }

  /**
   * Gets the value of the 'ct' field.
   * @return The value of the 'ct' field.
   */
  public my.example.hue.Ct getCt() {
    return ct;
  }


  /**
   * Sets the value of the 'ct' field.
   * @param value the value to set.
   */
  public void setCt(my.example.hue.Ct value) {
    this.ct = value;
  }

  /**
   * Gets the value of the 'alert' field.
   * @return The value of the 'alert' field.
   */
  public java.lang.String getAlert() {
    return alert;
  }


  /**
   * Sets the value of the 'alert' field.
   * @param value the value to set.
   */
  public void setAlert(java.lang.String value) {
    this.alert = value;
  }

  /**
   * Gets the value of the 'colormode' field.
   * @return The value of the 'colormode' field.
   */
  public java.lang.String getColormode() {
    return colormode;
  }


  /**
   * Sets the value of the 'colormode' field.
   * @param value the value to set.
   */
  public void setColormode(java.lang.String value) {
    this.colormode = value;
  }

  /**
   * Gets the value of the 'mode' field.
   * @return The value of the 'mode' field.
   */
  public java.lang.String getMode() {
    return mode;
  }


  /**
   * Sets the value of the 'mode' field.
   * @param value the value to set.
   */
  public void setMode(java.lang.String value) {
    this.mode = value;
  }

  /**
   * Gets the value of the 'reachable' field.
   * @return The value of the 'reachable' field.
   */
  public boolean getReachable() {
    return reachable;
  }


  /**
   * Sets the value of the 'reachable' field.
   * @param value the value to set.
   */
  public void setReachable(boolean value) {
    this.reachable = value;
  }

  /**
   * Creates a new State RecordBuilder.
   * @return A new State RecordBuilder
   */
  public static my.example.hue.State.Builder newBuilder() {
    return new my.example.hue.State.Builder();
  }

  /**
   * Creates a new State RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new State RecordBuilder
   */
  public static my.example.hue.State.Builder newBuilder(my.example.hue.State.Builder other) {
    if (other == null) {
      return new my.example.hue.State.Builder();
    } else {
      return new my.example.hue.State.Builder(other);
    }
  }

  /**
   * Creates a new State RecordBuilder by copying an existing State instance.
   * @param other The existing instance to copy.
   * @return A new State RecordBuilder
   */
  public static my.example.hue.State.Builder newBuilder(my.example.hue.State other) {
    if (other == null) {
      return new my.example.hue.State.Builder();
    } else {
      return new my.example.hue.State.Builder(other);
    }
  }

  /**
   * RecordBuilder for State instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<State>
    implements org.apache.avro.data.RecordBuilder<State> {

    private boolean on;
    private long bri;
    private long hue;
    private long sat;
    private java.lang.String effect;
    private java.util.List<java.lang.Double> xy;
    private my.example.hue.Ct ct;
    private my.example.hue.Ct.Builder ctBuilder;
    private java.lang.String alert;
    private java.lang.String colormode;
    private java.lang.String mode;
    private boolean reachable;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(my.example.hue.State.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.on)) {
        this.on = data().deepCopy(fields()[0].schema(), other.on);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.bri)) {
        this.bri = data().deepCopy(fields()[1].schema(), other.bri);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.hue)) {
        this.hue = data().deepCopy(fields()[2].schema(), other.hue);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.sat)) {
        this.sat = data().deepCopy(fields()[3].schema(), other.sat);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.effect)) {
        this.effect = data().deepCopy(fields()[4].schema(), other.effect);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.xy)) {
        this.xy = data().deepCopy(fields()[5].schema(), other.xy);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.ct)) {
        this.ct = data().deepCopy(fields()[6].schema(), other.ct);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (other.hasCtBuilder()) {
        this.ctBuilder = my.example.hue.Ct.newBuilder(other.getCtBuilder());
      }
      if (isValidValue(fields()[7], other.alert)) {
        this.alert = data().deepCopy(fields()[7].schema(), other.alert);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.colormode)) {
        this.colormode = data().deepCopy(fields()[8].schema(), other.colormode);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.mode)) {
        this.mode = data().deepCopy(fields()[9].schema(), other.mode);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.reachable)) {
        this.reachable = data().deepCopy(fields()[10].schema(), other.reachable);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
    }

    /**
     * Creates a Builder by copying an existing State instance
     * @param other The existing instance to copy.
     */
    private Builder(my.example.hue.State other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.on)) {
        this.on = data().deepCopy(fields()[0].schema(), other.on);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.bri)) {
        this.bri = data().deepCopy(fields()[1].schema(), other.bri);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.hue)) {
        this.hue = data().deepCopy(fields()[2].schema(), other.hue);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.sat)) {
        this.sat = data().deepCopy(fields()[3].schema(), other.sat);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.effect)) {
        this.effect = data().deepCopy(fields()[4].schema(), other.effect);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.xy)) {
        this.xy = data().deepCopy(fields()[5].schema(), other.xy);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.ct)) {
        this.ct = data().deepCopy(fields()[6].schema(), other.ct);
        fieldSetFlags()[6] = true;
      }
      this.ctBuilder = null;
      if (isValidValue(fields()[7], other.alert)) {
        this.alert = data().deepCopy(fields()[7].schema(), other.alert);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.colormode)) {
        this.colormode = data().deepCopy(fields()[8].schema(), other.colormode);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.mode)) {
        this.mode = data().deepCopy(fields()[9].schema(), other.mode);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.reachable)) {
        this.reachable = data().deepCopy(fields()[10].schema(), other.reachable);
        fieldSetFlags()[10] = true;
      }
    }

    /**
      * Gets the value of the 'on' field.
      * @return The value.
      */
    public boolean getOn() {
      return on;
    }


    /**
      * Sets the value of the 'on' field.
      * @param value The value of 'on'.
      * @return This builder.
      */
    public my.example.hue.State.Builder setOn(boolean value) {
      validate(fields()[0], value);
      this.on = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'on' field has been set.
      * @return True if the 'on' field has been set, false otherwise.
      */
    public boolean hasOn() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'on' field.
      * @return This builder.
      */
    public my.example.hue.State.Builder clearOn() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'bri' field.
      * @return The value.
      */
    public long getBri() {
      return bri;
    }


    /**
      * Sets the value of the 'bri' field.
      * @param value The value of 'bri'.
      * @return This builder.
      */
    public my.example.hue.State.Builder setBri(long value) {
      validate(fields()[1], value);
      this.bri = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'bri' field has been set.
      * @return True if the 'bri' field has been set, false otherwise.
      */
    public boolean hasBri() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'bri' field.
      * @return This builder.
      */
    public my.example.hue.State.Builder clearBri() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'hue' field.
      * @return The value.
      */
    public long getHue() {
      return hue;
    }


    /**
      * Sets the value of the 'hue' field.
      * @param value The value of 'hue'.
      * @return This builder.
      */
    public my.example.hue.State.Builder setHue(long value) {
      validate(fields()[2], value);
      this.hue = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'hue' field has been set.
      * @return True if the 'hue' field has been set, false otherwise.
      */
    public boolean hasHue() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'hue' field.
      * @return This builder.
      */
    public my.example.hue.State.Builder clearHue() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'sat' field.
      * @return The value.
      */
    public long getSat() {
      return sat;
    }


    /**
      * Sets the value of the 'sat' field.
      * @param value The value of 'sat'.
      * @return This builder.
      */
    public my.example.hue.State.Builder setSat(long value) {
      validate(fields()[3], value);
      this.sat = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'sat' field has been set.
      * @return True if the 'sat' field has been set, false otherwise.
      */
    public boolean hasSat() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'sat' field.
      * @return This builder.
      */
    public my.example.hue.State.Builder clearSat() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'effect' field.
      * @return The value.
      */
    public java.lang.String getEffect() {
      return effect;
    }


    /**
      * Sets the value of the 'effect' field.
      * @param value The value of 'effect'.
      * @return This builder.
      */
    public my.example.hue.State.Builder setEffect(java.lang.String value) {
      validate(fields()[4], value);
      this.effect = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'effect' field has been set.
      * @return True if the 'effect' field has been set, false otherwise.
      */
    public boolean hasEffect() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'effect' field.
      * @return This builder.
      */
    public my.example.hue.State.Builder clearEffect() {
      effect = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'xy' field.
      * @return The value.
      */
    public java.util.List<java.lang.Double> getXy() {
      return xy;
    }


    /**
      * Sets the value of the 'xy' field.
      * @param value The value of 'xy'.
      * @return This builder.
      */
    public my.example.hue.State.Builder setXy(java.util.List<java.lang.Double> value) {
      validate(fields()[5], value);
      this.xy = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'xy' field has been set.
      * @return True if the 'xy' field has been set, false otherwise.
      */
    public boolean hasXy() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'xy' field.
      * @return This builder.
      */
    public my.example.hue.State.Builder clearXy() {
      xy = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'ct' field.
      * @return The value.
      */
    public my.example.hue.Ct getCt() {
      return ct;
    }


    /**
      * Sets the value of the 'ct' field.
      * @param value The value of 'ct'.
      * @return This builder.
      */
    public my.example.hue.State.Builder setCt(my.example.hue.Ct value) {
      validate(fields()[6], value);
      this.ctBuilder = null;
      this.ct = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'ct' field has been set.
      * @return True if the 'ct' field has been set, false otherwise.
      */
    public boolean hasCt() {
      return fieldSetFlags()[6];
    }

    /**
     * Gets the Builder instance for the 'ct' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public my.example.hue.Ct.Builder getCtBuilder() {
      if (ctBuilder == null) {
        if (hasCt()) {
          setCtBuilder(my.example.hue.Ct.newBuilder(ct));
        } else {
          setCtBuilder(my.example.hue.Ct.newBuilder());
        }
      }
      return ctBuilder;
    }

    /**
     * Sets the Builder instance for the 'ct' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public my.example.hue.State.Builder setCtBuilder(my.example.hue.Ct.Builder value) {
      clearCt();
      ctBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'ct' field has an active Builder instance
     * @return True if the 'ct' field has an active Builder instance
     */
    public boolean hasCtBuilder() {
      return ctBuilder != null;
    }

    /**
      * Clears the value of the 'ct' field.
      * @return This builder.
      */
    public my.example.hue.State.Builder clearCt() {
      ct = null;
      ctBuilder = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'alert' field.
      * @return The value.
      */
    public java.lang.String getAlert() {
      return alert;
    }


    /**
      * Sets the value of the 'alert' field.
      * @param value The value of 'alert'.
      * @return This builder.
      */
    public my.example.hue.State.Builder setAlert(java.lang.String value) {
      validate(fields()[7], value);
      this.alert = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'alert' field has been set.
      * @return True if the 'alert' field has been set, false otherwise.
      */
    public boolean hasAlert() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'alert' field.
      * @return This builder.
      */
    public my.example.hue.State.Builder clearAlert() {
      alert = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'colormode' field.
      * @return The value.
      */
    public java.lang.String getColormode() {
      return colormode;
    }


    /**
      * Sets the value of the 'colormode' field.
      * @param value The value of 'colormode'.
      * @return This builder.
      */
    public my.example.hue.State.Builder setColormode(java.lang.String value) {
      validate(fields()[8], value);
      this.colormode = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'colormode' field has been set.
      * @return True if the 'colormode' field has been set, false otherwise.
      */
    public boolean hasColormode() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'colormode' field.
      * @return This builder.
      */
    public my.example.hue.State.Builder clearColormode() {
      colormode = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'mode' field.
      * @return The value.
      */
    public java.lang.String getMode() {
      return mode;
    }


    /**
      * Sets the value of the 'mode' field.
      * @param value The value of 'mode'.
      * @return This builder.
      */
    public my.example.hue.State.Builder setMode(java.lang.String value) {
      validate(fields()[9], value);
      this.mode = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'mode' field has been set.
      * @return True if the 'mode' field has been set, false otherwise.
      */
    public boolean hasMode() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'mode' field.
      * @return This builder.
      */
    public my.example.hue.State.Builder clearMode() {
      mode = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'reachable' field.
      * @return The value.
      */
    public boolean getReachable() {
      return reachable;
    }


    /**
      * Sets the value of the 'reachable' field.
      * @param value The value of 'reachable'.
      * @return This builder.
      */
    public my.example.hue.State.Builder setReachable(boolean value) {
      validate(fields()[10], value);
      this.reachable = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'reachable' field has been set.
      * @return True if the 'reachable' field has been set, false otherwise.
      */
    public boolean hasReachable() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'reachable' field.
      * @return This builder.
      */
    public my.example.hue.State.Builder clearReachable() {
      fieldSetFlags()[10] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public State build() {
      try {
        State record = new State();
        record.on = fieldSetFlags()[0] ? this.on : (java.lang.Boolean) defaultValue(fields()[0]);
        record.bri = fieldSetFlags()[1] ? this.bri : (java.lang.Long) defaultValue(fields()[1]);
        record.hue = fieldSetFlags()[2] ? this.hue : (java.lang.Long) defaultValue(fields()[2]);
        record.sat = fieldSetFlags()[3] ? this.sat : (java.lang.Long) defaultValue(fields()[3]);
        record.effect = fieldSetFlags()[4] ? this.effect : (java.lang.String) defaultValue(fields()[4]);
        record.xy = fieldSetFlags()[5] ? this.xy : (java.util.List<java.lang.Double>) defaultValue(fields()[5]);
        if (ctBuilder != null) {
          try {
            record.ct = this.ctBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("ct"));
            throw e;
          }
        } else {
          record.ct = fieldSetFlags()[6] ? this.ct : (my.example.hue.Ct) defaultValue(fields()[6]);
        }
        record.alert = fieldSetFlags()[7] ? this.alert : (java.lang.String) defaultValue(fields()[7]);
        record.colormode = fieldSetFlags()[8] ? this.colormode : (java.lang.String) defaultValue(fields()[8]);
        record.mode = fieldSetFlags()[9] ? this.mode : (java.lang.String) defaultValue(fields()[9]);
        record.reachable = fieldSetFlags()[10] ? this.reachable : (java.lang.Boolean) defaultValue(fields()[10]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<State>
    WRITER$ = (org.apache.avro.io.DatumWriter<State>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<State>
    READER$ = (org.apache.avro.io.DatumReader<State>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeBoolean(this.on);

    out.writeLong(this.bri);

    out.writeLong(this.hue);

    out.writeLong(this.sat);

    if (this.effect == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.effect);
    }

    long size0 = this.xy.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (java.lang.Double e0: this.xy) {
      actualSize0++;
      out.startItem();
      out.writeDouble(e0);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    if (this.ct == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.ct.customEncode(out);
    }

    if (this.alert == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.alert);
    }

    if (this.colormode == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.colormode);
    }

    if (this.mode == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.mode);
    }

    out.writeBoolean(this.reachable);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.on = in.readBoolean();

      this.bri = in.readLong();

      this.hue = in.readLong();

      this.sat = in.readLong();

      if (in.readIndex() != 1) {
        in.readNull();
        this.effect = null;
      } else {
        this.effect = in.readString();
      }

      long size0 = in.readArrayStart();
      java.util.List<java.lang.Double> a0 = this.xy;
      if (a0 == null) {
        a0 = new SpecificData.Array<java.lang.Double>((int)size0, SCHEMA$.getField("xy").schema());
        this.xy = a0;
      } else a0.clear();
      SpecificData.Array<java.lang.Double> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          java.lang.Double e0 = (ga0 != null ? ga0.peek() : null);
          e0 = in.readDouble();
          a0.add(e0);
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.ct = null;
      } else {
        if (this.ct == null) {
          this.ct = new my.example.hue.Ct();
        }
        this.ct.customDecode(in);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.alert = null;
      } else {
        this.alert = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.colormode = null;
      } else {
        this.colormode = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.mode = null;
      } else {
        this.mode = in.readString();
      }

      this.reachable = in.readBoolean();

    } else {
      for (int i = 0; i < 11; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.on = in.readBoolean();
          break;

        case 1:
          this.bri = in.readLong();
          break;

        case 2:
          this.hue = in.readLong();
          break;

        case 3:
          this.sat = in.readLong();
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.effect = null;
          } else {
            this.effect = in.readString();
          }
          break;

        case 5:
          long size0 = in.readArrayStart();
          java.util.List<java.lang.Double> a0 = this.xy;
          if (a0 == null) {
            a0 = new SpecificData.Array<java.lang.Double>((int)size0, SCHEMA$.getField("xy").schema());
            this.xy = a0;
          } else a0.clear();
          SpecificData.Array<java.lang.Double> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              java.lang.Double e0 = (ga0 != null ? ga0.peek() : null);
              e0 = in.readDouble();
              a0.add(e0);
            }
          }
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.ct = null;
          } else {
            if (this.ct == null) {
              this.ct = new my.example.hue.Ct();
            }
            this.ct.customDecode(in);
          }
          break;

        case 7:
          if (in.readIndex() != 1) {
            in.readNull();
            this.alert = null;
          } else {
            this.alert = in.readString();
          }
          break;

        case 8:
          if (in.readIndex() != 1) {
            in.readNull();
            this.colormode = null;
          } else {
            this.colormode = in.readString();
          }
          break;

        case 9:
          if (in.readIndex() != 1) {
            in.readNull();
            this.mode = null;
          } else {
            this.mode = in.readString();
          }
          break;

        case 10:
          this.reachable = in.readBoolean();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










