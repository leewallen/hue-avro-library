/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package my.example.hue;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Control extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8089784086876981464L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Control\",\"namespace\":\"my.example.hue\",\"fields\":[{\"name\":\"mindimlevel\",\"type\":\"long\"},{\"name\":\"maxlumen\",\"type\":\"long\"},{\"name\":\"colorgamuttype\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"colorgamut\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":\"double\"}}},{\"name\":\"ct\",\"type\":{\"type\":\"record\",\"name\":\"Ct\",\"fields\":[{\"name\":\"min\",\"type\":\"long\"},{\"name\":\"max\",\"type\":\"long\"}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Control> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Control> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Control> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Control> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Control> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Control to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Control from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Control instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Control fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  public long mindimlevel;
  public long maxlumen;
  public java.lang.String colorgamuttype;
  public java.util.List<java.util.List<java.lang.Double>> colorgamut;
  public my.example.hue.Ct ct;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Control() {}

  /**
   * All-args constructor.
   * @param mindimlevel The new value for mindimlevel
   * @param maxlumen The new value for maxlumen
   * @param colorgamuttype The new value for colorgamuttype
   * @param colorgamut The new value for colorgamut
   * @param ct The new value for ct
   */
  public Control(java.lang.Long mindimlevel, java.lang.Long maxlumen, java.lang.String colorgamuttype, java.util.List<java.util.List<java.lang.Double>> colorgamut, my.example.hue.Ct ct) {
    this.mindimlevel = mindimlevel;
    this.maxlumen = maxlumen;
    this.colorgamuttype = colorgamuttype;
    this.colorgamut = colorgamut;
    this.ct = ct;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return mindimlevel;
    case 1: return maxlumen;
    case 2: return colorgamuttype;
    case 3: return colorgamut;
    case 4: return ct;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: mindimlevel = (java.lang.Long)value$; break;
    case 1: maxlumen = (java.lang.Long)value$; break;
    case 2: colorgamuttype = value$ != null ? value$.toString() : null; break;
    case 3: colorgamut = (java.util.List<java.util.List<java.lang.Double>>)value$; break;
    case 4: ct = (my.example.hue.Ct)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'mindimlevel' field.
   * @return The value of the 'mindimlevel' field.
   */
  public long getMindimlevel() {
    return mindimlevel;
  }


  /**
   * Sets the value of the 'mindimlevel' field.
   * @param value the value to set.
   */
  public void setMindimlevel(long value) {
    this.mindimlevel = value;
  }

  /**
   * Gets the value of the 'maxlumen' field.
   * @return The value of the 'maxlumen' field.
   */
  public long getMaxlumen() {
    return maxlumen;
  }


  /**
   * Sets the value of the 'maxlumen' field.
   * @param value the value to set.
   */
  public void setMaxlumen(long value) {
    this.maxlumen = value;
  }

  /**
   * Gets the value of the 'colorgamuttype' field.
   * @return The value of the 'colorgamuttype' field.
   */
  public java.lang.String getColorgamuttype() {
    return colorgamuttype;
  }


  /**
   * Sets the value of the 'colorgamuttype' field.
   * @param value the value to set.
   */
  public void setColorgamuttype(java.lang.String value) {
    this.colorgamuttype = value;
  }

  /**
   * Gets the value of the 'colorgamut' field.
   * @return The value of the 'colorgamut' field.
   */
  public java.util.List<java.util.List<java.lang.Double>> getColorgamut() {
    return colorgamut;
  }


  /**
   * Sets the value of the 'colorgamut' field.
   * @param value the value to set.
   */
  public void setColorgamut(java.util.List<java.util.List<java.lang.Double>> value) {
    this.colorgamut = value;
  }

  /**
   * Gets the value of the 'ct' field.
   * @return The value of the 'ct' field.
   */
  public my.example.hue.Ct getCt() {
    return ct;
  }


  /**
   * Sets the value of the 'ct' field.
   * @param value the value to set.
   */
  public void setCt(my.example.hue.Ct value) {
    this.ct = value;
  }

  /**
   * Creates a new Control RecordBuilder.
   * @return A new Control RecordBuilder
   */
  public static my.example.hue.Control.Builder newBuilder() {
    return new my.example.hue.Control.Builder();
  }

  /**
   * Creates a new Control RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Control RecordBuilder
   */
  public static my.example.hue.Control.Builder newBuilder(my.example.hue.Control.Builder other) {
    if (other == null) {
      return new my.example.hue.Control.Builder();
    } else {
      return new my.example.hue.Control.Builder(other);
    }
  }

  /**
   * Creates a new Control RecordBuilder by copying an existing Control instance.
   * @param other The existing instance to copy.
   * @return A new Control RecordBuilder
   */
  public static my.example.hue.Control.Builder newBuilder(my.example.hue.Control other) {
    if (other == null) {
      return new my.example.hue.Control.Builder();
    } else {
      return new my.example.hue.Control.Builder(other);
    }
  }

  /**
   * RecordBuilder for Control instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Control>
    implements org.apache.avro.data.RecordBuilder<Control> {

    private long mindimlevel;
    private long maxlumen;
    private java.lang.String colorgamuttype;
    private java.util.List<java.util.List<java.lang.Double>> colorgamut;
    private my.example.hue.Ct ct;
    private my.example.hue.Ct.Builder ctBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(my.example.hue.Control.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.mindimlevel)) {
        this.mindimlevel = data().deepCopy(fields()[0].schema(), other.mindimlevel);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.maxlumen)) {
        this.maxlumen = data().deepCopy(fields()[1].schema(), other.maxlumen);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.colorgamuttype)) {
        this.colorgamuttype = data().deepCopy(fields()[2].schema(), other.colorgamuttype);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.colorgamut)) {
        this.colorgamut = data().deepCopy(fields()[3].schema(), other.colorgamut);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.ct)) {
        this.ct = data().deepCopy(fields()[4].schema(), other.ct);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (other.hasCtBuilder()) {
        this.ctBuilder = my.example.hue.Ct.newBuilder(other.getCtBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing Control instance
     * @param other The existing instance to copy.
     */
    private Builder(my.example.hue.Control other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.mindimlevel)) {
        this.mindimlevel = data().deepCopy(fields()[0].schema(), other.mindimlevel);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.maxlumen)) {
        this.maxlumen = data().deepCopy(fields()[1].schema(), other.maxlumen);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.colorgamuttype)) {
        this.colorgamuttype = data().deepCopy(fields()[2].schema(), other.colorgamuttype);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.colorgamut)) {
        this.colorgamut = data().deepCopy(fields()[3].schema(), other.colorgamut);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.ct)) {
        this.ct = data().deepCopy(fields()[4].schema(), other.ct);
        fieldSetFlags()[4] = true;
      }
      this.ctBuilder = null;
    }

    /**
      * Gets the value of the 'mindimlevel' field.
      * @return The value.
      */
    public long getMindimlevel() {
      return mindimlevel;
    }


    /**
      * Sets the value of the 'mindimlevel' field.
      * @param value The value of 'mindimlevel'.
      * @return This builder.
      */
    public my.example.hue.Control.Builder setMindimlevel(long value) {
      validate(fields()[0], value);
      this.mindimlevel = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'mindimlevel' field has been set.
      * @return True if the 'mindimlevel' field has been set, false otherwise.
      */
    public boolean hasMindimlevel() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'mindimlevel' field.
      * @return This builder.
      */
    public my.example.hue.Control.Builder clearMindimlevel() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'maxlumen' field.
      * @return The value.
      */
    public long getMaxlumen() {
      return maxlumen;
    }


    /**
      * Sets the value of the 'maxlumen' field.
      * @param value The value of 'maxlumen'.
      * @return This builder.
      */
    public my.example.hue.Control.Builder setMaxlumen(long value) {
      validate(fields()[1], value);
      this.maxlumen = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'maxlumen' field has been set.
      * @return True if the 'maxlumen' field has been set, false otherwise.
      */
    public boolean hasMaxlumen() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'maxlumen' field.
      * @return This builder.
      */
    public my.example.hue.Control.Builder clearMaxlumen() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'colorgamuttype' field.
      * @return The value.
      */
    public java.lang.String getColorgamuttype() {
      return colorgamuttype;
    }


    /**
      * Sets the value of the 'colorgamuttype' field.
      * @param value The value of 'colorgamuttype'.
      * @return This builder.
      */
    public my.example.hue.Control.Builder setColorgamuttype(java.lang.String value) {
      validate(fields()[2], value);
      this.colorgamuttype = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'colorgamuttype' field has been set.
      * @return True if the 'colorgamuttype' field has been set, false otherwise.
      */
    public boolean hasColorgamuttype() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'colorgamuttype' field.
      * @return This builder.
      */
    public my.example.hue.Control.Builder clearColorgamuttype() {
      colorgamuttype = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'colorgamut' field.
      * @return The value.
      */
    public java.util.List<java.util.List<java.lang.Double>> getColorgamut() {
      return colorgamut;
    }


    /**
      * Sets the value of the 'colorgamut' field.
      * @param value The value of 'colorgamut'.
      * @return This builder.
      */
    public my.example.hue.Control.Builder setColorgamut(java.util.List<java.util.List<java.lang.Double>> value) {
      validate(fields()[3], value);
      this.colorgamut = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'colorgamut' field has been set.
      * @return True if the 'colorgamut' field has been set, false otherwise.
      */
    public boolean hasColorgamut() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'colorgamut' field.
      * @return This builder.
      */
    public my.example.hue.Control.Builder clearColorgamut() {
      colorgamut = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'ct' field.
      * @return The value.
      */
    public my.example.hue.Ct getCt() {
      return ct;
    }


    /**
      * Sets the value of the 'ct' field.
      * @param value The value of 'ct'.
      * @return This builder.
      */
    public my.example.hue.Control.Builder setCt(my.example.hue.Ct value) {
      validate(fields()[4], value);
      this.ctBuilder = null;
      this.ct = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'ct' field has been set.
      * @return True if the 'ct' field has been set, false otherwise.
      */
    public boolean hasCt() {
      return fieldSetFlags()[4];
    }

    /**
     * Gets the Builder instance for the 'ct' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public my.example.hue.Ct.Builder getCtBuilder() {
      if (ctBuilder == null) {
        if (hasCt()) {
          setCtBuilder(my.example.hue.Ct.newBuilder(ct));
        } else {
          setCtBuilder(my.example.hue.Ct.newBuilder());
        }
      }
      return ctBuilder;
    }

    /**
     * Sets the Builder instance for the 'ct' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public my.example.hue.Control.Builder setCtBuilder(my.example.hue.Ct.Builder value) {
      clearCt();
      ctBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'ct' field has an active Builder instance
     * @return True if the 'ct' field has an active Builder instance
     */
    public boolean hasCtBuilder() {
      return ctBuilder != null;
    }

    /**
      * Clears the value of the 'ct' field.
      * @return This builder.
      */
    public my.example.hue.Control.Builder clearCt() {
      ct = null;
      ctBuilder = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Control build() {
      try {
        Control record = new Control();
        record.mindimlevel = fieldSetFlags()[0] ? this.mindimlevel : (java.lang.Long) defaultValue(fields()[0]);
        record.maxlumen = fieldSetFlags()[1] ? this.maxlumen : (java.lang.Long) defaultValue(fields()[1]);
        record.colorgamuttype = fieldSetFlags()[2] ? this.colorgamuttype : (java.lang.String) defaultValue(fields()[2]);
        record.colorgamut = fieldSetFlags()[3] ? this.colorgamut : (java.util.List<java.util.List<java.lang.Double>>) defaultValue(fields()[3]);
        if (ctBuilder != null) {
          try {
            record.ct = this.ctBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("ct"));
            throw e;
          }
        } else {
          record.ct = fieldSetFlags()[4] ? this.ct : (my.example.hue.Ct) defaultValue(fields()[4]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Control>
    WRITER$ = (org.apache.avro.io.DatumWriter<Control>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Control>
    READER$ = (org.apache.avro.io.DatumReader<Control>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.mindimlevel);

    out.writeLong(this.maxlumen);

    if (this.colorgamuttype == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.colorgamuttype);
    }

    long size0 = this.colorgamut.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (java.util.List<java.lang.Double> e0: this.colorgamut) {
      actualSize0++;
      out.startItem();
      long size1 = e0.size();
      out.writeArrayStart();
      out.setItemCount(size1);
      long actualSize1 = 0;
      for (java.lang.Double e1: e0) {
        actualSize1++;
        out.startItem();
        out.writeDouble(e1);
      }
      out.writeArrayEnd();
      if (actualSize1 != size1)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size1 + ", but element count was " + actualSize1 + ".");
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    this.ct.customEncode(out);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.mindimlevel = in.readLong();

      this.maxlumen = in.readLong();

      if (in.readIndex() != 1) {
        in.readNull();
        this.colorgamuttype = null;
      } else {
        this.colorgamuttype = in.readString();
      }

      long size0 = in.readArrayStart();
      java.util.List<java.util.List<java.lang.Double>> a0 = this.colorgamut;
      if (a0 == null) {
        a0 = new SpecificData.Array<java.util.List<java.lang.Double>>((int)size0, SCHEMA$.getField("colorgamut").schema());
        this.colorgamut = a0;
      } else a0.clear();
      SpecificData.Array<java.util.List<java.lang.Double>> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.util.List<java.lang.Double>>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          java.util.List<java.lang.Double> e0 = (ga0 != null ? ga0.peek() : null);
          long size1 = in.readArrayStart();
          java.util.List<java.lang.Double> a1 = e0;
          if (a1 == null) {
            a1 = new SpecificData.Array<java.lang.Double>((int)size1, SCHEMA$.getField("colorgamut").schema().getElementType());
            e0 = a1;
          } else a1.clear();
          SpecificData.Array<java.lang.Double> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a1 : null);
          for ( ; 0 < size1; size1 = in.arrayNext()) {
            for ( ; size1 != 0; size1--) {
              java.lang.Double e1 = (ga1 != null ? ga1.peek() : null);
              e1 = in.readDouble();
              a1.add(e1);
            }
          }
          a0.add(e0);
        }
      }

      if (this.ct == null) {
        this.ct = new my.example.hue.Ct();
      }
      this.ct.customDecode(in);

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.mindimlevel = in.readLong();
          break;

        case 1:
          this.maxlumen = in.readLong();
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.colorgamuttype = null;
          } else {
            this.colorgamuttype = in.readString();
          }
          break;

        case 3:
          long size0 = in.readArrayStart();
          java.util.List<java.util.List<java.lang.Double>> a0 = this.colorgamut;
          if (a0 == null) {
            a0 = new SpecificData.Array<java.util.List<java.lang.Double>>((int)size0, SCHEMA$.getField("colorgamut").schema());
            this.colorgamut = a0;
          } else a0.clear();
          SpecificData.Array<java.util.List<java.lang.Double>> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.util.List<java.lang.Double>>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              java.util.List<java.lang.Double> e0 = (ga0 != null ? ga0.peek() : null);
              long size1 = in.readArrayStart();
              java.util.List<java.lang.Double> a1 = e0;
              if (a1 == null) {
                a1 = new SpecificData.Array<java.lang.Double>((int)size1, SCHEMA$.getField("colorgamut").schema().getElementType());
                e0 = a1;
              } else a1.clear();
              SpecificData.Array<java.lang.Double> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a1 : null);
              for ( ; 0 < size1; size1 = in.arrayNext()) {
                for ( ; size1 != 0; size1--) {
                  java.lang.Double e1 = (ga1 != null ? ga1.peek() : null);
                  e1 = in.readDouble();
                  a1.add(e1);
                }
              }
              a0.add(e0);
            }
          }
          break;

        case 4:
          if (this.ct == null) {
            this.ct = new my.example.hue.Ct();
          }
          this.ct.customDecode(in);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










